import { Unpromise } from '../../../vendor/unpromise/unpromise.mjs';
import { createPromiseTimer } from './promiseTimer.mjs';

const PING_SYM = Symbol('ping');
const PING_RESULT = {
    value: PING_SYM,
    done: false
};
/**
 * Derives a new {@link AsyncGenerator} based of {@link iterable}, that yields {@link PING_SYM}
 * whenever no value has been yielded for {@link pingIntervalMs}.
 */ async function* withPing(iterable, pingIntervalMs) {
    const timer = createPromiseTimer(pingIntervalMs);
    const iterator = iterable[Symbol.asyncIterator]();
    // declaration outside the loop for garbage collection reasons
    let result;
    while(true){
        const nextPromise = iterator.next();
        const pingPromise = timer.start().promise.then(()=>PING_RESULT);
        try {
            result = await Unpromise.race([
                nextPromise,
                pingPromise
            ]);
        } finally{
            timer.clear();
        }
        if (result.done) {
            return result.value;
        }
        yield result.value;
        timer.reset();
        // free up reference for garbage collection
        result = null;
    }
}

export { PING_SYM, withPing };
